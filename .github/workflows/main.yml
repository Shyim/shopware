name: CI
on:
  workflow_dispatch:
  push:
  schedule:
    - cron: '0 1 * * *'

jobs:
  generate-jobs:
    name: Generate Jobs
    runs-on: ubuntu-20.04
    outputs:
      strategy: ${{ steps.generate-jobs.outputs.strategy }}
    steps:
    - uses: actions/checkout@v2

    - uses: denoland/setup-deno@v1
      with:
        deno-version: v1.x

    - id: generate-jobs
      name: Generate Jobs
      run: |
        deno run --allow-net build.ts
        strategy="$(deno run --allow-net build.ts)"
        echo $strategy
        echo "::set-output name=strategy::$strategy"

  build-php:
    name: PHP ${{ matrix.php }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        php: [7.4, 8.0, 8.1]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login into Github Docker Registery
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build PHP
        run: docker buildx build -f Dockerfile.php --platform linux/amd64,linux/arm64 --build-arg PHP_VERSION=${{ matrix.php }} --tag ghcr.io/shyim/shopware-php:${{ matrix.php }} --push .

  build-shopware:
    needs: 
      - generate-jobs
      - build-php
    strategy: ${{ fromJson(needs.generate-jobs.outputs.strategy) }}
    name: ${{ matrix.name }}
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Login into Docker Registery
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "shyim" --password-stdin

      - name: Login into Github Docker Registery
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Build ${{ matrix.name }}
        run: ${{ matrix.runs.build }}
